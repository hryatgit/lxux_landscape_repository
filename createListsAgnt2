#! /usr/bin/env bash



OUTPUT_FILE="/tmp/$(hostname)-$$.pckgList"
ERROR_FILE="/tmp/$(hostname)-$$.pckgList.Err"
MYNAME=$(basename $0)


find  /tmp -maxdepth 1 -name "*.pckgList*" -exec rm {} \;

>OUTPUT_FILE
>ERROR_FILE
exec	1>$OUTPUT_FILE
exec	2>$ERROR_FILE

################ BEGIN FUNCTIONs ################
function onExit() {
	[ $DONE  -eq 1 ] \
	&& putsTimeStampObj "__ENDofFile" "$(hostname)" "parts" "$(date)" \
	|| printErr "interception exit, job incomplete" 
}

function onErr() {
	LASTLINE=$1
	LASTErrCode=$2
        printErr "LASTLINE=$LASTLINE, LASTErrCode=$LASTErrCode"
}

function printErr() {
	MSG=$1
	echo "ERROR: $MSG" >&2
}

function printInfo() {
	MSG=$1
	echo "INFO: $MSG" >&1
}

function printData() {
	MSG=$1
	echo "DATA: $MSG" >&1
}

	
function putsTimeStampObj() {
	stamp=$1; host=$2; content=$3; stamptime=$4
	STR="\"timestamp\" : [ { \
\"stamp\" : \"$stamp\", \
\"host\" : \"$host\", \
\"content\" : \"$content\", \
\"stamptime\" : \"$stamptime\" \
} ]"
	printInfo "$STR"
}
###################################


printPartInfo() {
        PARTID="$1"
        VALUE="$2"

        echo -e "$PARTID=$VALUE\thostId=$(hostname)"
}

getIP() {

        IFCNFG="/etc/sysconfig/network-scripts/ifcfg-eth[0-9]"
        for FN in $(ls $IFCNFG)
        do
                DEVICE="$(grep "DEVICE" $FN | cut -d'=' -f2 | tr -d '"')"
                IPADDR="$(grep "IPADDR" $FN | cut -d'=' -f2 | tr -d '"')"
                NETMASK="$(grep "NETMASK" $FN | cut -d'=' -f2 | tr -d '"')"
                GATEWAY="$(grep "GATEWAY" $FN | cut -d'=' -f2 | tr -d '"')"

                printPartInfo "etherName" ${DEVICE}
                printPartInfo "${DEVICE}-IPADDR" $IPADDR
                printPartInfo ${DEVICE}-NETMASK $NETMASK
                printPartInfo ${DEVICE}-GATEWAY $GATEWAY
        done
}

getDNS() {

        i=1
        grep nameserver /etc/resolv.conf | while read X IP
        do
                printPartInfo "DNS-$((i++))" $IP
        done
}

reportPartition() {
        PID=$1
        PSIZE=$2
        PY=$3
        MOUNTP=$4

	[ -z "$MOUNTP" ] && MSTR="" || MSTR="mount: <$MOUNTP>"
        printPartInfo "-->part$PY: $PID" "$PSIZE $MSTR"
}

reportDisk() {
        DID="$1"
        DSIZE="$2"
        NR="$3"
        MOUNTP="$4"
        I=$5
        TYPE="$6"

        [ -z "$MOUNTP" ] && MSTR="" || MSTR="mount: <$MOUNTP>"
        printPartInfo "${TYPE}-$NR: $DID" "$DSIZE $MSTR"
}

reportSumDisks() {
        NOD="$1"
        DSUMSZ="$2"
        TYPE=$3

        printPartInfo "NoOf$TYPE" "$NOD"
        printPartInfo "all$TYPE sum-GB" "$DSUMSZ"
}

getBlkDevs() {
	DEVTYPE=$1

        SUMSZ=0
        i=0
        while read LINE
        do
		case $DEVTYPE in
		lvm)
			ID="$(echo $LINE | awk '{print $1 " " $2;}')"
                	SIZEGB=$(echo $LINE | awk '{print $5;}')
                	TYPE=$(echo $LINE | awk '{print $7;}')
                	MOUNTP=$(echo $LINE | awk '{print $8;}')
		;;
		*)
			ID=$(echo $LINE | awk '{print $1;}')
                	SIZEGB=$(echo $LINE | awk '{print $4;}')
                	TYPE=$(echo $LINE | awk '{print $6;}')
                	MOUNTP=$(echo $LINE | awk '{print $7;}')
		;;
		esac
                x=$i
                reportDisk "$ID" "$SIZEGB" "$x" "$MOUNTP" $(( i++ )) $TYPE
                PNR=0
		### partiotions
                lsblk -l | grep "$ID" | grep part >/tmp/hry$$
                while read LINE
                do
			PID=$(echo $LINE | awk '{print $1;}')
                	PSIZEGB=$(echo $LINE | awk '{print $4;}')
                	PTYPE=$(echo $LINE | awk '{print $6;}')
                	PMOUNTP=$(echo $LINE | awk '{print $7;}')
                        y=$PNR
                        reportPartition "$PID" "$PSIZEGB" "$y" "$PMOUNTP" $(( PNR++ ))
                done < /tmp/hry$$
                rm /tmp/hry$$
		GB=$(echo $SIZEGB | grep G | wc -l)
		[ $GB -eq 1 ] && SIZE=$(basename $SIZEGB G) \
		|| SIZE=1
                SUMSZ=$(expr $SUMSZ + $SIZE )

        done<<<"$(lsblk -l | grep $DEVTYPE)"
        x=$(( ++x ))
	reportSumDisks "$x" "$SUMSZ" $DEVTYPE
}

################ END FUNCTIONs ################

################ BEGIN BODY    ################

################ BEGIN BODY    ################
trap 'onExit' EXIT
trap 'onErr ${LINENO} $?' ERR


DONE=0
putsTimeStampObj "BEGINofFile" "$(hostname)" "parts" "$(date)"

### system ID
printData "$HOST"
getIP
getDNS
getBlkDevs "disk"
[ $(lsblk -l | grep "mpath" | wc -l) -ne 0 ] \
&& getBlkDevs "mpath"
[ $(lsblk -l | grep "lvm" | wc -l) -ne 0 ] \
&& getBlkDevs "lvm"

DONE=1
