#! /usr/bin/env bash

source $(dirname $0)/commonHeader.sh

### ==================================================================
### ================  LOCAL FUNCTION PART   ==========================
usage() {
	echo "usage: $MYNAME serverListFile"
	[ $ARGS -eq 0 ] && echo "(too few arguments)" \
	|| echo "(too many arguments)"
}

chckContent() {
	F=$1
	LINES=$(cat $F | wc -l)
	[ $LINES -eq 0 ] && printInfo "structure requered (LF) in $F" \
	&& exitOK

	while read HOST authFile comments
	do
		[ -z "$authFile" ] \
		&& printInfo "for host: <$HOST>, missing authFile (filename)" \
		&& exitOK
		[ "$authFile" == "N/A" ] && continue
		[ ! -r $AUTH_REPO/$authFile ] \
		&& printInfo "server: $HOST, authFile: $authFile missing -r" \
		&& exitOK
	done < $F
}

chckHostListFile() {
	file="$1"
	[ ! -f $file ] \
	&& printInfo "file: <$file> doesn't exist" \
	&& exitOK
	[ ! -r $file ] \
	&& printInfo "file: <$file>, missing read permissions" \
	&& exitOK
	return 0
}
###
### ================ END LOCAL FUNCTION PART   =======================
### ==================================================================

### ==================================================================
### ================         BODY        =============================

HOSTLIST=$1
AUTH_REPO=$AUTHORIZATION_FILE_DIR
RUNMAPPER=$MYDIR/$MAPPER

printInfo "started"

#####################################
### check credential & conditions
#####################################

[ $ARGS -ne 1 ] && usage && exitOK

chckHostListFile "$HOSTLIST"	### acces / permissions r OK ???
chckContent "$HOSTLIST"		### authorization files accessible ???

MAPS2DO=$(cat $F | wc -l)	### count all jobs, one per line
				### format: <hostname> <whiteSpace> [ <authFileName> |'N/A' ]

FIRSTLINE=1			### index parameter (here always 1 )
SERIALIZATION_FCTR=1		### the higher this value the lower is the "parallel effect",
				### the easier for memory and cpu resource 

#################################################################
### let's go
### trigger (spawn) the working job(s) now; mapps will be run
### local and parallel (simultaneously); each of them installing 
### and managing one remote running execution agent;
### in particular $RUNMAPPER spawns MAPS2DO/SERIALIZATION_FCTR
### number of parallel running processes local on this machine;
### take care about system recources on this machine
### (max proc/user, fileDescriptos, cpu, memory ?)

[ ! -d $MY_REPO_DIR ] && mkdir $MY_REPO_DIR && printInfo "$MY_REPO_DIR created"
[ ! -d $MY_REPO_DIR ] && printErr "$MY_REPO_DIR create failed" && exitOK

### clean up all old reports
[  -d $REPORT_DIR ] && rm -r $REPORT_DIR
printInfo "clean up all old reports in <$REPORT_DIR> done"

printInfo "waiting for $RUNMAPPER $HOSTLIST $FIRSTLINE $MAPS2DO $SERIALIZATION_FCTR ....."
$MYDIR/$RUNMAPPER $HOSTLIST $FIRSTLINE $MAPS2DO $SERIALIZATION_FCTR \
&& cp $HOSTLIST $MY_REPO_DIR/$HOSTLIST.job-$$ && DONE=1
[ ! -d $MARKER_DIR ] && mkdir $MARKER_DIR
[ ! -d $MARKER_DIR ] && "$MARKER_DIR create failed" && exitOK

exec 1>&9 9>&-			###  Restore stdout and close file descriptor #9
exec 2>&8 8>&-			###  Restore stderr and close file descriptor #8

RECEIVED_FILES=0
EXPECTED_FILES=$(cat $MY_REPO_DIR/$HOSTLIST.job-$$ | wc -l)
LOOP=0
while [ true ]
do
	RECEIVED_FILES=0
	while read host rest
	do
		MARKERMAPING=$MARKER_DIR/$host.$MARKER_SUF
		[ ! -f $MARKERMAPING ] && continue
		MARKER=$(cat $MARKERMAPING)
		[ -f $REPORT_DIR/$MARKER-*.pckgList ] \
		&& (( RECEIVED_FILES++ ))
	done <<<"$(cat $MY_REPO_DIR/$HOSTLIST.job-$$)"
	echo -e "\r$(( LOOP++ )) received/expected: $RECEIVED_FILES/$EXPECTED_FILES \c"
	[ $RECEIVED_FILES -lt $EXPECTED_FILES ] && sleep 1 || break
done

while read host rest
do
	MARKERMAPING=$MARKER_DIR/$host.$MARKER_SUF
	mv $MARKERMAPING $MARKERMAPING-$$
done <<< "$(cat $MY_REPO_DIR/$HOSTLIST.job-$$"
