#! /usr/bin/env bash

source $(dirname $0)/commonHeader.sh

### ==================================================================
### ================  LOCAL FUNCTION PART   ==========================
usage() {
	echo "usage: $MYNAME serverListFile"
	[ $ARGS -eq 0 ] && echo "(too few arguments)" \
	|| echo "(too many arguments)"
}

chckContent() {
	F=$1
	LINES=$(cat $F | wc -l)
	[ $LINES -eq 0 ] && printInfo "structure requered (LF) in $F" \
	&& exitOK

	while read HOST authFile comments
	do
		[ -z "$authFile" ] \
		&& printInfo "for host: <$HOST>, missing authFile (filename)" \
		&& exitOK
		[ "$authFile" == "N/A" ] && continue
		[ ! -r $AUTH_REPO/$authFile ] \
		&& printInfo "server: $HOST, authFile: $authFile missing -r" \
		&& exitOK
	done < $F
}

chckHostListFile() {
	file="$1"
	[ ! -f $file ] \
	&& printInfo "file: <$file> doesn't exist" \
	&& exitOK
	[ ! -r $file ] \
	&& printInfo "file: <$file>, missing read permissions" \
	&& exitOK
	return 0
}
###
### ================ END LOCAL FUNCTION PART   =======================
### ==================================================================

### ==================================================================
### ================         BODY        =============================

HOSTLIST=$1
TST_AUTH_REPO="/home/hry/.ssh"
AUTH_REPO=$TST_AUTH_REPO	### define the *.pom *.pub repoDir here
RUNMAPPER="createPckgInventoryMapper"

printInfo "started"

#####################################
### check credential & conditions
#####################################

[ $ARGS -ne 1 ] && usage && exitOK

chckHostListFile "$HOSTLIST"	### acces / permissions r OK ???
chckContent "$HOSTLIST"		### authorization files accessible ???

MAPS2DO=$(cat $F | wc -l)	### count all jobs, one per line
				### format: <hostname> <whiteSpace> [ <authFileName> |'N/A' ]

FIRSTLINE=1			### index parameter (here always 1 )
SERIALIZATION_FCTR=1		### the higher this value the lower is the "parallel effect",
				### the easier for memory and cpu resource 

#################################################################
### let's go
### trigger (spawn) the working job(s) now; mapps will be run
### local and parallel (simultaneously); each of them installing 
### and managing one remote running execution agent;
### in particular $RUNMAPPER spawns MAPS2DO/SERIALIZATION_FCTR
### number of parallel running processes local on this machine;
### take care about system recources on this machine
### (max proc/user, cpu and memory ?)

printInfo "waiting for $RUNMAPPER $HOSTLIST $FIRSTLINE $MAPS2DO $SERIALIZATION_FCTR ....."
$MYDIR/$RUNMAPPER $HOSTLIST $FIRSTLINE $MAPS2DO $SERIALIZATION_FCTR \
&& DONE=1
